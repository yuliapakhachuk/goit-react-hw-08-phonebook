{"version":3,"file":"static/js/342.ed93b110.chunk.js","mappings":"qNAEaA,EAAYC,EAAAA,GAAAA,IAAH,gX,sCCiBXC,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,KC9BQG,EAAaX,EAAAA,GAAAA,KAAH,g2B,mBCKVY,EAAc,WACzB,IAAMC,EAASZ,IACTa,EAAUb,IAEFc,GAAUC,EAAAA,EAAAA,MAAhBC,KACR,GAAkBC,EAAAA,EAAAA,MAAXC,GAAP,eAEMC,EAAY,mCAAG,WAAMC,GAAN,oFACnBA,EAAEC,iBACIC,EAAOF,EAAEG,OAFI,EAGKD,EAAKE,SAArBC,EAHW,EAGXA,KAAMC,EAHK,EAGLA,MAHK,SAIQZ,EAAMa,MAAK,SAAAC,GAAG,OAAIA,EAAIH,OAASA,EAAKI,SAJ5C,mCAMfC,MAAM,WAAD,OAAYL,EAAZ,uBANU,yCAOTP,EAAQ,CAAEO,KAAMA,EAAKI,MAAOH,MAAOA,EAAMG,QAPhC,QAQnBP,EAAKS,QARc,4CAAH,sDAWlB,OACE,UAACrB,EAAD,CAAYsB,SAAUb,EAAtB,WACE,4BACE,kBAAOc,QAASrB,EAAhB,mBACA,kBACEN,GAAIM,EACJsB,KAAK,OACLT,KAAK,OACLU,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,4BACE,kBAAOJ,QAASpB,EAAhB,qBACA,kBACEP,GAAIO,EACJqB,KAAK,MACLT,KAAK,QACLU,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZ,mBAAQH,KAAK,SAAb,6BChDOI,EAAkBvC,EAAAA,GAAAA,IAAH,6U,oBCCtBwC,EAAa,SAAAC,GAAK,OAAIA,EAAMC,QASlC,EAPuB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAGjB,MAAO,CAAEF,QAFMG,EAAAA,EAAAA,IAAYL,GAEVM,UADO,SAAAhB,GAAK,OAAIa,GAASG,EAAAA,EAAAA,IAAUhB,OCLhDiB,EAAW9C,IAEJ+C,EAAS,WACpB,MAA8BC,IAAtBP,EAAR,EAAQA,OAAQI,EAAhB,EAAgBA,UAEhB,OACE,UAACP,EAAD,YACE,kBAAOL,QAASa,EAAhB,oCACA,kBACEG,SAAU,SAAA7B,GACRyB,EAAUzB,EAAEG,OAAOM,QAErBvB,GAAIwC,EACJZ,KAAK,OACLL,MAAOY,EACPhB,KAAK,eChBAyB,EAAWnD,EAAAA,GAAAA,GAAH,8jBCERoD,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB3B,EAAoB2B,EAApB3B,KAAMC,EAAc0B,EAAd1B,MAAOpB,EAAO8C,EAAP9C,GAErB,GAAoC+C,EAAAA,EAAAA,MAApC,eAAOC,EAAP,KAAqBC,EAArB,KAAqBA,UAErB,OACE,UAACL,EAAD,YACE,yBACGzB,EADH,MACYC,MAEZ,mBAAQ8B,SAAUD,EAAWE,QAAS,kBAAMH,EAAWhD,IAAvD,SACGiD,EAAY,cAAgB,e,mBCUrC,EArBsB,WACpB,IAAMd,GAASG,EAAAA,EAAAA,KAAY,SAAAJ,GAAK,OAAIA,EAAMC,OAAOiB,iBAE3CC,GAAsBC,EAAAA,EAAAA,IAC1B,CAAC,SAAAC,GAAQ,OAAIA,EAAS7C,MAAM,SAAC8C,EAAGrB,GAAJ,OAAeA,KAC3C,SAAC3B,EAAO2B,GAAY,IAAD,EACjB,wBACE3B,QADF,IACEA,OADF,EACEA,EAAO2B,QAAO,SAAAsB,GAAI,OAAIA,EAAKtC,KAAKiC,cAAcM,SAASvB,aADzD,QACqE,MAIzE,OAAO1B,EAAAA,EAAAA,SAAiBkD,EAAW,CACjCC,iBADiC,SAChBC,GACf,OAAO,kBACFA,GADL,IAEEC,cAAeT,EAAoBQ,EAAQ1B,SCjBtC4B,EAAatE,EAAAA,GAAAA,GAAH,qDCEVuE,EAAc,WACzB,MAA4CC,IAApCH,EAAR,EAAQA,cAAeI,EAAvB,EAAuBA,MAAOjB,EAA9B,EAA8BA,UAE9B,OACE,gCACGiB,IACC,2FAIDjB,GACC,uCAEA,SAACc,EAAD,UACGD,EAAcK,KAAI,SAAArB,GAAO,OACxB,SAACD,EAAD,CAA8BC,QAASA,GAArBA,EAAQ9C,aCdvB,SAASoE,IACtB,OACE,UAAC5E,EAAD,YACE,wCACA,SAACa,EAAD,KACA,sCACA,SAACoC,EAAD,KACA,SAACuB,EAAD","sources":["views/ContactsView/StyledApp.jsx","../node_modules/nanoid/index.browser.js","components/Form/StyledForm.jsx","components/Form/Form.jsx","components/Filter/StyledFilter.jsx","redux/filterSlice/filterHook.js","components/Filter/Filter.jsx","components/ListElement/StyledListElement.jsx","components/ListElement/ListElement.jsx","redux/itemsSlice/itemsHook.js","components/ContactList/StyledContactList.jsx","components/ContactList/ContactList.jsx","views/ContactsView/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  border-radius: 10px;\n  max-width: 70%;\n  font-size: 16px;\n  color: #010101;\n  margin: 50px auto;\n  padding: 50px 20px;\n  h1 {\n    font-size: 28px;\n  }\n  /* display: block;\n  border-radius: 10px;\n  max-width: 500px;\n  font-size: 24px;\n  color: #010101;\n  background-color: lightcoral;\n  margin: 50px auto;\n  padding: 15px; */\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  background-color: #68e4c3;\n  display: flex;\n  gap: 20px;\n  align-items: flex-end;\n  flex-basis: 33%;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  border: 1px dashed #31615a;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  padding: 20px;\n  label {\n    display: block;\n    margin-bottom: 8px;\n  }\n  input {\n    display: block;\n    height: 25px;\n    padding: 5px;\n    border-radius: 5px;\n    border: 1px solid #31615a;\n    outline: none;\n    &:focus {\n      border: 1px solid #9a46aa;\n    }\n  }\n  button {\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #31615a;\n    background-color: #31615a;\n    color: #ffffff;\n    cursor: pointer;\n    transition: ease-in 200ms;\n    :hover {\n      border: 1px solid #9a46aa;\n      background-color: #b97ac6;\n    }\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { StyledForm } from './StyledForm';\nimport {\n  useAddItemMutation,\n  useGetItemsQuery,\n} from 'redux/itemsSlice/itemsSlice';\n\nexport const ContactForm = () => {\n  const nameId = nanoid();\n  const phoneId = nanoid();\n\n  const { data: items } = useGetItemsQuery();\n  const [addItem] = useAddItemMutation();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, phone } = form.elements;\n    const alreadyAdded = await items.some(obj => obj.name === name.value);\n    alreadyAdded\n      ? alert(`Contact ${name} has already added`)\n      : await addItem({ name: name.value, phone: phone.value });\n    form.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor={nameId}>Name</label>\n        <input\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor={phoneId}>Number</label>\n        <input\n          id={phoneId}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n\n      <button type=\"submit\">Add contact</button>\n    </StyledForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFilterDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  input {\n    display: block;\n    height: 28px;\n    padding: 4px;\n    border-radius: 4px;\n    border: 1px solid #376761;\n    outline: none;\n    &:focus {\n      border: 1px solid #db4bff;\n    }\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from './filterSlice';\n\nconst getIFilter = state => state.filter;\n\nconst useFilterSlice = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getIFilter);\n  const handleSetFilter = value => dispatch(setFilter(value));\n  return { filter, setFilter: handleSetFilter };\n};\n\nexport default useFilterSlice;\n","import { nanoid } from 'nanoid';\nimport { StyledFilterDiv } from './StyledFilter';\nimport useFilterSlice from 'redux/filterSlice/filterHook';\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const { filter, setFilter } = useFilterSlice();\n\n  return (\n    <StyledFilterDiv>\n      <label htmlFor={filterId}>Find contacts by name</label>\n      <input\n        onChange={e => {\n          setFilter(e.target.value);\n        }}\n        id={filterId}\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n      />\n    </StyledFilterDiv>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledLi = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px 0;\n  padding: 12px 20px;\n  background-color: #68e4c382;\n  border: 1px dashed #59c6a9;\n  border-radius: 4px;\n  transition: ease-in 200ms;\n  button {\n    display: block;\n    padding: 8px 24px;\n    border-radius: 4px;\n    border: 1px solid #31615a;\n    background-color: #31615a;\n    color: #ffffff;\n    cursor: pointer;\n    transition: ease-in 200ms;\n    :hover {\n      border: 1px solid #9a46aa;\n      background-color: #b97ac6;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLi } from './StyledListElement';\nimport { useDeleteItemMutation } from 'redux/itemsSlice/itemsSlice';\n\nexport const ListElement = ({ contact }) => {\n  const { name, phone, id } = contact;\n\n  const [deleteItem, { isLoading }] = useDeleteItemMutation();\n\n  return (\n    <StyledLi>\n      <p>\n        {name} : {phone}\n      </p>\n      <button disabled={isLoading} onClick={() => deleteItem(id)}>\n        {isLoading ? '...Deleting' : 'Delete'}\n      </button>\n    </StyledLi>\n  );\n};\n\nListElement.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useGetItemsQuery } from 'redux/itemsSlice/itemsSlice';\n\nconst useItemsSlice = () => {\n  const filter = useSelector(state => state.filter.toLowerCase());\n\n  const selectFilteredItems = createSelector(\n    [response => response.data, (_, filter) => filter],\n    (items, filter) => {\n      return (\n        items?.filter(item => item.name.toLowerCase().includes(filter)) ?? []\n      );\n    }\n  );\n  return useGetItemsQuery(undefined, {\n    selectFromResult(result) {\n      return {\n        ...result,\n        filteredItems: selectFilteredItems(result, filter),\n      };\n    },\n  });\n};\n\nexport default useItemsSlice;\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n","import { ListElement } from '../ListElement/ListElement';\nimport useItemsSlice from 'redux/itemsSlice/itemsHook';\nimport { StyledList } from './StyledContactList';\n\nexport const ContactList = () => {\n  const { filteredItems, error, isLoading } = useItemsSlice();\n\n  return (\n    <>\n      {error && (\n        <p>\n          Oops! Something went wrong! Refresh page and try again, please.\n        </p>\n      )}\n      {isLoading ? (\n        <b>Loading...</b>\n      ) : (\n        <StyledList>\n          {filteredItems.map(contact => (\n            <ListElement key={contact.id} contact={contact} />\n          ))}\n        </StyledList>\n      )}\n    </>\n  );\n};\n","import { StyledApp } from './StyledApp';\nimport { ContactForm } from '../../components/Form/Form';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\n\nexport default function ContactsView() {\n  return (\n    <StyledApp>\n      <h1>Phone book</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </StyledApp>\n  );\n}\n"],"names":["StyledApp","styled","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","StyledForm","ContactForm","nameId","phoneId","items","useGetItemsQuery","data","useAddItemMutation","addItem","handleSubmit","e","preventDefault","form","target","elements","name","phone","some","obj","value","alert","reset","onSubmit","htmlFor","type","pattern","title","required","StyledFilterDiv","getIFilter","state","filter","dispatch","useDispatch","useSelector","setFilter","filterId","Filter","useFilterSlice","onChange","StyledLi","ListElement","contact","useDeleteItemMutation","deleteItem","isLoading","disabled","onClick","toLowerCase","selectFilteredItems","createSelector","response","_","item","includes","undefined","selectFromResult","result","filteredItems","StyledList","ContactList","useItemsSlice","error","map","ContactsView"],"sourceRoot":""}